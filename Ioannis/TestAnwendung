library(shiny)
library(leaflet)
library(sf)
library(httr)
library(dplyr)
library(DT)
library(ggplot2)

# --- Daten laden (Berlin filtern) ---
feature_service_url <- "https://services2.arcgis.com/jUpNdisbWqRpMo35/arcgis/rest/services/Brückenstatistik_Deutschland/FeatureServer/0/query"

load_bruecken_berlin <- function(url) {
  query_params <- list(
    outFields = "*",
    where = "bl_name='Berlin'",
    f = "geojson"
  )
  
  res <- httr::GET(url, query = query_params)
  stopifnot(res$status_code == 200)
  
  geojson_text <- httr::content(res, as = "text", encoding = "UTF-8")
  bruecken_berlin <- sf::st_read(geojson_text, quiet = TRUE)
  
  # Baujahr bereinigen: in numerisch umwandeln (NA bei "abc" etc.)
  bruecken_berlin$baujahr_num <- suppressWarnings(as.numeric(bruecken_berlin$baujahr))
  
  return(bruecken_berlin)
}

bruecken <- load_bruecken_berlin(feature_service_url)

min_baujahr <- min(bruecken$baujahr_num, na.rm = TRUE)
max_baujahr <- max(bruecken$baujahr_num, na.rm = TRUE)

# UI
ui <- navbarPage(
  "Brücken Berlin - Interaktive Analyse",
  
  tabPanel("Startseite",
           fluidPage(
             h2("Willkommen zur Brückenanalyse Berlin"),
             p("Diese Anwendung ermöglicht Behörden einen interaktiven Überblick über Brücken in Berlin."),
             p("Datenquelle: Brückenstatistik Deutschland (ArcGIS Feature Service)"),
             hr(),
             h4("Navigation:"),
             tags$ul(
               tags$li("Kartenansicht: Interaktive Karte mit Filtermöglichkeiten"),
               tags$li("Datenanalyse: Diagramme, Tabellen und Exportfunktion")
             )
           )
  ),
  
  tabPanel("Kartenansicht",
           sidebarLayout(
             sidebarPanel(
               textInput("searchName", "Brückensuche (Name enthält):", ""),
               selectInput("filterZustand", "Zustandsnotenklasse:",
                           choices = c("Alle", sort(unique(bruecken$zustandsnotenklasse))),
                           selected = "Alle"),
               sliderInput("baujahrRange", "Baujahr (von - bis):",
                           min = floor(min_baujahr),
                           max = ceiling(max_baujahr),
                           value = c(floor(min_baujahr), ceiling(max_baujahr)),
                           step = 1,
                           sep = "")
               
             ),
             mainPanel(
               leafletOutput("map", height = 600)
             )
           )
  ),
  
  tabPanel("Datenanalyse",
           fluidPage(
             h3("Statistische Auswertung der Brücken"),
             fluidRow(
               column(6,
                      plotOutput("baujahrHist")
               ),
               column(6,
                      plotOutput("zustandBar")
               )
             ),
             hr(),
             DTOutput("table"),
             downloadButton("downloadData", "Gefilterte Daten exportieren (CSV)")
           )
  )
)

# Server
server <- function(input, output, session) {
  
  filteredData <- reactive({
    data <- bruecken
    
    # Name filtern (bauwerksname)
    if (input$searchName != "") {
      data <- data[grepl(tolower(input$searchName), tolower(data$bauwerksname), fixed = TRUE), ]
    }
    
    # Zustand filtern (zustandsnotenklasse)
    if (input$filterZustand != "Alle") {
      data <- data[data$zustandsnotenklasse == input$filterZustand, ]
    }
    
    # Baujahr filtern (nur gültige numerische Baujahre)
    data <- data[!is.na(data$baujahr_num) & data$baujahr_num >= input$baujahrRange[1] & data$baujahr_num <= input$baujahrRange[2], ]
    
    data
  })
  
  output$map <- renderLeaflet({
    data <- filteredData()
    
    pal <- colorFactor(
      palette = c("green", "yellow", "orange", "red"),
      domain = unique(bruecken$zustandsnotenklasse)
    )
    
    leaflet(data) %>%
      addTiles() %>%
      addCircleMarkers(
        lng = ~st_coordinates(geometry)[,1],
        lat = ~st_coordinates(geometry)[,2],
        color = ~pal(zustandsnotenklasse),
        radius = 6,
        stroke = FALSE,
        fillOpacity = 0.8,
        popup = ~paste0(
          "<b>Name:</b> ", bauwerksname, "<br>",
          "<b>Zustand:</b> ", zustandsnotenklasse, "<br>",
          "<b>Baujahr:</b> ", baujahr, "<br>",
          "<b>Baustoff:</b> ", baustoffklasse, "<br>",
          "<b>Traglastindex:</b> ", trag_l_idx, "<br>",
          "<b>Sperrstatus:</b> ", Sperrung_SV
        )
      ) %>%
      addLegend("bottomright", pal = pal, values = ~zustandsnotenklasse, title = "Zustandsnotenklasse")
  })
  
  output$baujahrHist <- renderPlot({
    data <- filteredData()
    valid_baujahr <- data$baujahr_num[!is.na(data$baujahr_num)]
    if (length(valid_baujahr) == 0) {
      plot.new()
      text(0.5, 0.5, "Keine gültigen Baujahre zum Plotten")
    } else {
      ggplot(data.frame(baujahr = valid_baujahr), aes(x = baujahr)) +
        geom_histogram(binwidth = 5, fill = "steelblue", color = "white") +
        labs(title = "Verteilung Baujahr", x = "Baujahr", y = "Anzahl") +
        theme_minimal()
    }
  })
  
  output$zustandBar <- renderPlot({
    data <- filteredData() %>%
      group_by(zustandsnotenklasse) %>%
      summarise(Anzahl = n()) %>%
      filter(!is.na(zustandsnotenklasse))
    
    ggplot(data, aes(x = zustandsnotenklasse, y = Anzahl, fill = zustandsnotenklasse)) +
      geom_bar(stat = "identity") +
      labs(title = "Zustandsnotenklasse Verteilung", x = "Zustand", y = "Anzahl") +
      theme_minimal() +
      theme(legend.position = "none")
  })
  
  output$table <- renderDT({
    data <- filteredData()
    data_tbl <- data %>%
      st_set_geometry(NULL) %>%
      select(bauwerksname, zustandsnotenklasse, baujahr, baustoffklasse, trag_l_idx, Sperrung_SV)
    
    datatable(data_tbl, filter = "top", options = list(pageLength = 10))
  })
  
  output$downloadData <- downloadHandler(
    filename = function() {
      paste("bruecken_berlin_", Sys.Date(), ".csv", sep = "")
    },
    content = function(file) {
      data <- filteredData() %>%
        st_set_geometry(NULL)
      write.csv(data, file, row.names = FALSE)
    }
  )
}

shinyApp(ui, server)
